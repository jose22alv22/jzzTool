#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Jazz")]
	public partial class JazzToolDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertsport(sport instance);
    partial void Updatesport(sport instance);
    partial void Deletesport(sport instance);
    partial void InsertPropTypeBySport(PropTypeBySport instance);
    partial void UpdatePropTypeBySport(PropTypeBySport instance);
    partial void DeletePropTypeBySport(PropTypeBySport instance);
    partial void InsertPropType(PropType instance);
    partial void UpdatePropType(PropType instance);
    partial void DeletePropType(PropType instance);
    partial void InsertProp(Prop instance);
    partial void UpdateProp(Prop instance);
    partial void DeleteProp(Prop instance);
    partial void InsertPosition(Position instance);
    partial void UpdatePosition(Position instance);
    partial void DeletePosition(Position instance);
    #endregion
		
		public JazzToolDataContext() : 
				base(global::Test.Properties.Settings.Default.JazzConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public JazzToolDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JazzToolDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JazzToolDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public JazzToolDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<sport> sports
		{
			get
			{
				return this.GetTable<sport>();
			}
		}
		
		public System.Data.Linq.Table<PropTypeBySport> PropTypeBySports
		{
			get
			{
				return this.GetTable<PropTypeBySport>();
			}
		}
		
		public System.Data.Linq.Table<PropType> PropTypes
		{
			get
			{
				return this.GetTable<PropType>();
			}
		}
		
		public System.Data.Linq.Table<Prop> Props
		{
			get
			{
				return this.GetTable<Prop>();
			}
		}
		
		public System.Data.Linq.Table<PropByPosition> PropByPositions
		{
			get
			{
				return this.GetTable<PropByPosition>();
			}
		}
		
		public System.Data.Linq.Table<Position> Positions
		{
			get
			{
				return this.GetTable<Position>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="jazzTool.sports")]
	public partial class sport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _idSport;
		
		private string _sport1;
		
		private System.Nullable<bool> _isActive;
		
		private System.Nullable<System.DateTime> _lastModificationDate;
		
		private System.Nullable<byte> _lastModificationUser;
		
		private EntitySet<PropTypeBySport> _PropTypeBySports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidSportChanging(byte value);
    partial void OnidSportChanged();
    partial void Onsport1Changing(string value);
    partial void Onsport1Changed();
    partial void OnisActiveChanging(System.Nullable<bool> value);
    partial void OnisActiveChanged();
    partial void OnlastModificationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnlastModificationDateChanged();
    partial void OnlastModificationUserChanging(System.Nullable<byte> value);
    partial void OnlastModificationUserChanged();
    #endregion
		
		public sport()
		{
			this._PropTypeBySports = new EntitySet<PropTypeBySport>(new Action<PropTypeBySport>(this.attach_PropTypeBySports), new Action<PropTypeBySport>(this.detach_PropTypeBySports));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSport", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte idSport
		{
			get
			{
				return this._idSport;
			}
			set
			{
				if ((this._idSport != value))
				{
					this.OnidSportChanging(value);
					this.SendPropertyChanging();
					this._idSport = value;
					this.SendPropertyChanged("idSport");
					this.OnidSportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="sport", Storage="_sport1", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		public string sport1
		{
			get
			{
				return this._sport1;
			}
			set
			{
				if ((this._sport1 != value))
				{
					this.Onsport1Changing(value);
					this.SendPropertyChanging();
					this._sport1 = value;
					this.SendPropertyChanged("sport1");
					this.Onsport1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit")]
		public System.Nullable<bool> isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastModificationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> lastModificationDate
		{
			get
			{
				return this._lastModificationDate;
			}
			set
			{
				if ((this._lastModificationDate != value))
				{
					this.OnlastModificationDateChanging(value);
					this.SendPropertyChanging();
					this._lastModificationDate = value;
					this.SendPropertyChanged("lastModificationDate");
					this.OnlastModificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastModificationUser", DbType="TinyInt")]
		public System.Nullable<byte> lastModificationUser
		{
			get
			{
				return this._lastModificationUser;
			}
			set
			{
				if ((this._lastModificationUser != value))
				{
					this.OnlastModificationUserChanging(value);
					this.SendPropertyChanging();
					this._lastModificationUser = value;
					this.SendPropertyChanged("lastModificationUser");
					this.OnlastModificationUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sport_PropTypeBySport", Storage="_PropTypeBySports", ThisKey="idSport", OtherKey="idSport")]
		public EntitySet<PropTypeBySport> PropTypeBySports
		{
			get
			{
				return this._PropTypeBySports;
			}
			set
			{
				this._PropTypeBySports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PropTypeBySports(PropTypeBySport entity)
		{
			this.SendPropertyChanging();
			entity.sport = this;
		}
		
		private void detach_PropTypeBySports(PropTypeBySport entity)
		{
			this.SendPropertyChanging();
			entity.sport = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="jazzTool.PropTypeBySport")]
	public partial class PropTypeBySport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _idPropTypeBySport;
		
		private byte _idSport;
		
		private byte _idPropType;
		
		private System.Nullable<System.DateTime> _lastModificationDate;
		
		private System.Nullable<byte> _lastModificationUser;
		
		private EntitySet<Prop> _Props;
		
		private EntitySet<Position> _Positions;
		
		private EntityRef<sport> _sport;
		
		private EntityRef<PropType> _PropType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidPropTypeBySportChanging(byte value);
    partial void OnidPropTypeBySportChanged();
    partial void OnidSportChanging(byte value);
    partial void OnidSportChanged();
    partial void OnidPropTypeChanging(byte value);
    partial void OnidPropTypeChanged();
    partial void OnlastModificationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnlastModificationDateChanged();
    partial void OnlastModificationUserChanging(System.Nullable<byte> value);
    partial void OnlastModificationUserChanged();
    #endregion
		
		public PropTypeBySport()
		{
			this._Props = new EntitySet<Prop>(new Action<Prop>(this.attach_Props), new Action<Prop>(this.detach_Props));
			this._Positions = new EntitySet<Position>(new Action<Position>(this.attach_Positions), new Action<Position>(this.detach_Positions));
			this._sport = default(EntityRef<sport>);
			this._PropType = default(EntityRef<PropType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPropTypeBySport", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte idPropTypeBySport
		{
			get
			{
				return this._idPropTypeBySport;
			}
			set
			{
				if ((this._idPropTypeBySport != value))
				{
					this.OnidPropTypeBySportChanging(value);
					this.SendPropertyChanging();
					this._idPropTypeBySport = value;
					this.SendPropertyChanged("idPropTypeBySport");
					this.OnidPropTypeBySportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idSport", DbType="TinyInt NOT NULL")]
		public byte idSport
		{
			get
			{
				return this._idSport;
			}
			set
			{
				if ((this._idSport != value))
				{
					if (this._sport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidSportChanging(value);
					this.SendPropertyChanging();
					this._idSport = value;
					this.SendPropertyChanged("idSport");
					this.OnidSportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPropType", DbType="TinyInt NOT NULL")]
		public byte idPropType
		{
			get
			{
				return this._idPropType;
			}
			set
			{
				if ((this._idPropType != value))
				{
					if (this._PropType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPropTypeChanging(value);
					this.SendPropertyChanging();
					this._idPropType = value;
					this.SendPropertyChanged("idPropType");
					this.OnidPropTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastModificationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> lastModificationDate
		{
			get
			{
				return this._lastModificationDate;
			}
			set
			{
				if ((this._lastModificationDate != value))
				{
					this.OnlastModificationDateChanging(value);
					this.SendPropertyChanging();
					this._lastModificationDate = value;
					this.SendPropertyChanged("lastModificationDate");
					this.OnlastModificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastModificationUser", DbType="TinyInt")]
		public System.Nullable<byte> lastModificationUser
		{
			get
			{
				return this._lastModificationUser;
			}
			set
			{
				if ((this._lastModificationUser != value))
				{
					this.OnlastModificationUserChanging(value);
					this.SendPropertyChanging();
					this._lastModificationUser = value;
					this.SendPropertyChanged("lastModificationUser");
					this.OnlastModificationUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PropTypeBySport_Prop", Storage="_Props", ThisKey="idPropTypeBySport", OtherKey="idPropTypeBySport")]
		public EntitySet<Prop> Props
		{
			get
			{
				return this._Props;
			}
			set
			{
				this._Props.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PropTypeBySport_Position", Storage="_Positions", ThisKey="idPropTypeBySport", OtherKey="idPropTypeBySport")]
		public EntitySet<Position> Positions
		{
			get
			{
				return this._Positions;
			}
			set
			{
				this._Positions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="sport_PropTypeBySport", Storage="_sport", ThisKey="idSport", OtherKey="idSport", IsForeignKey=true)]
		public sport sport
		{
			get
			{
				return this._sport.Entity;
			}
			set
			{
				sport previousValue = this._sport.Entity;
				if (((previousValue != value) 
							|| (this._sport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sport.Entity = null;
						previousValue.PropTypeBySports.Remove(this);
					}
					this._sport.Entity = value;
					if ((value != null))
					{
						value.PropTypeBySports.Add(this);
						this._idSport = value.idSport;
					}
					else
					{
						this._idSport = default(byte);
					}
					this.SendPropertyChanged("sport");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PropType_PropTypeBySport", Storage="_PropType", ThisKey="idPropType", OtherKey="idPropType", IsForeignKey=true)]
		public PropType PropType
		{
			get
			{
				return this._PropType.Entity;
			}
			set
			{
				PropType previousValue = this._PropType.Entity;
				if (((previousValue != value) 
							|| (this._PropType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PropType.Entity = null;
						previousValue.PropTypeBySports.Remove(this);
					}
					this._PropType.Entity = value;
					if ((value != null))
					{
						value.PropTypeBySports.Add(this);
						this._idPropType = value.idPropType;
					}
					else
					{
						this._idPropType = default(byte);
					}
					this.SendPropertyChanged("PropType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Props(Prop entity)
		{
			this.SendPropertyChanging();
			entity.PropTypeBySport = this;
		}
		
		private void detach_Props(Prop entity)
		{
			this.SendPropertyChanging();
			entity.PropTypeBySport = null;
		}
		
		private void attach_Positions(Position entity)
		{
			this.SendPropertyChanging();
			entity.PropTypeBySport = this;
		}
		
		private void detach_Positions(Position entity)
		{
			this.SendPropertyChanging();
			entity.PropTypeBySport = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="jazzTool.PropType")]
	public partial class PropType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _idPropType;
		
		private string _propType1;
		
		private System.Nullable<System.DateTime> _lastModificationDate;
		
		private System.Nullable<byte> _lastModificationUser;
		
		private EntitySet<PropTypeBySport> _PropTypeBySports;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidPropTypeChanging(byte value);
    partial void OnidPropTypeChanged();
    partial void OnpropType1Changing(string value);
    partial void OnpropType1Changed();
    partial void OnlastModificationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnlastModificationDateChanged();
    partial void OnlastModificationUserChanging(System.Nullable<byte> value);
    partial void OnlastModificationUserChanged();
    #endregion
		
		public PropType()
		{
			this._PropTypeBySports = new EntitySet<PropTypeBySport>(new Action<PropTypeBySport>(this.attach_PropTypeBySports), new Action<PropTypeBySport>(this.detach_PropTypeBySports));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPropType", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte idPropType
		{
			get
			{
				return this._idPropType;
			}
			set
			{
				if ((this._idPropType != value))
				{
					this.OnidPropTypeChanging(value);
					this.SendPropertyChanging();
					this._idPropType = value;
					this.SendPropertyChanged("idPropType");
					this.OnidPropTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="propType", Storage="_propType1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string propType1
		{
			get
			{
				return this._propType1;
			}
			set
			{
				if ((this._propType1 != value))
				{
					this.OnpropType1Changing(value);
					this.SendPropertyChanging();
					this._propType1 = value;
					this.SendPropertyChanged("propType1");
					this.OnpropType1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastModificationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> lastModificationDate
		{
			get
			{
				return this._lastModificationDate;
			}
			set
			{
				if ((this._lastModificationDate != value))
				{
					this.OnlastModificationDateChanging(value);
					this.SendPropertyChanging();
					this._lastModificationDate = value;
					this.SendPropertyChanged("lastModificationDate");
					this.OnlastModificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastModificationUser", DbType="TinyInt")]
		public System.Nullable<byte> lastModificationUser
		{
			get
			{
				return this._lastModificationUser;
			}
			set
			{
				if ((this._lastModificationUser != value))
				{
					this.OnlastModificationUserChanging(value);
					this.SendPropertyChanging();
					this._lastModificationUser = value;
					this.SendPropertyChanged("lastModificationUser");
					this.OnlastModificationUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PropType_PropTypeBySport", Storage="_PropTypeBySports", ThisKey="idPropType", OtherKey="idPropType")]
		public EntitySet<PropTypeBySport> PropTypeBySports
		{
			get
			{
				return this._PropTypeBySports;
			}
			set
			{
				this._PropTypeBySports.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PropTypeBySports(PropTypeBySport entity)
		{
			this.SendPropertyChanging();
			entity.PropType = this;
		}
		
		private void detach_PropTypeBySports(PropTypeBySport entity)
		{
			this.SendPropertyChanging();
			entity.PropType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="jazzTool.Props")]
	public partial class Prop : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _idProp;
		
		private byte _idPropTypeBySport;
		
		private string _Description;
		
		private string _AwayTeam;
		
		private string _HomeTeam;
		
		private bool _isActive;
		
		private System.Nullable<System.DateTime> _lastModificationDate;
		
		private System.Nullable<byte> _lastModificationUser;
		
		private EntityRef<PropTypeBySport> _PropTypeBySport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidPropChanging(int value);
    partial void OnidPropChanged();
    partial void OnidPropTypeBySportChanging(byte value);
    partial void OnidPropTypeBySportChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnAwayTeamChanging(string value);
    partial void OnAwayTeamChanged();
    partial void OnHomeTeamChanging(string value);
    partial void OnHomeTeamChanged();
    partial void OnisActiveChanging(bool value);
    partial void OnisActiveChanged();
    partial void OnlastModificationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnlastModificationDateChanged();
    partial void OnlastModificationUserChanging(System.Nullable<byte> value);
    partial void OnlastModificationUserChanged();
    #endregion
		
		public Prop()
		{
			this._PropTypeBySport = default(EntityRef<PropTypeBySport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idProp", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int idProp
		{
			get
			{
				return this._idProp;
			}
			set
			{
				if ((this._idProp != value))
				{
					this.OnidPropChanging(value);
					this.SendPropertyChanging();
					this._idProp = value;
					this.SendPropertyChanged("idProp");
					this.OnidPropChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPropTypeBySport", DbType="TinyInt NOT NULL")]
		public byte idPropTypeBySport
		{
			get
			{
				return this._idPropTypeBySport;
			}
			set
			{
				if ((this._idPropTypeBySport != value))
				{
					if (this._PropTypeBySport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPropTypeBySportChanging(value);
					this.SendPropertyChanging();
					this._idPropTypeBySport = value;
					this.SendPropertyChanged("idPropTypeBySport");
					this.OnidPropTypeBySportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AwayTeam", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AwayTeam
		{
			get
			{
				return this._AwayTeam;
			}
			set
			{
				if ((this._AwayTeam != value))
				{
					this.OnAwayTeamChanging(value);
					this.SendPropertyChanging();
					this._AwayTeam = value;
					this.SendPropertyChanged("AwayTeam");
					this.OnAwayTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HomeTeam", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string HomeTeam
		{
			get
			{
				return this._HomeTeam;
			}
			set
			{
				if ((this._HomeTeam != value))
				{
					this.OnHomeTeamChanging(value);
					this.SendPropertyChanging();
					this._HomeTeam = value;
					this.SendPropertyChanged("HomeTeam");
					this.OnHomeTeamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this.OnisActiveChanging(value);
					this.SendPropertyChanging();
					this._isActive = value;
					this.SendPropertyChanged("isActive");
					this.OnisActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastModificationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> lastModificationDate
		{
			get
			{
				return this._lastModificationDate;
			}
			set
			{
				if ((this._lastModificationDate != value))
				{
					this.OnlastModificationDateChanging(value);
					this.SendPropertyChanging();
					this._lastModificationDate = value;
					this.SendPropertyChanged("lastModificationDate");
					this.OnlastModificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastModificationUser", DbType="TinyInt")]
		public System.Nullable<byte> lastModificationUser
		{
			get
			{
				return this._lastModificationUser;
			}
			set
			{
				if ((this._lastModificationUser != value))
				{
					this.OnlastModificationUserChanging(value);
					this.SendPropertyChanging();
					this._lastModificationUser = value;
					this.SendPropertyChanged("lastModificationUser");
					this.OnlastModificationUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PropTypeBySport_Prop", Storage="_PropTypeBySport", ThisKey="idPropTypeBySport", OtherKey="idPropTypeBySport", IsForeignKey=true)]
		public PropTypeBySport PropTypeBySport
		{
			get
			{
				return this._PropTypeBySport.Entity;
			}
			set
			{
				PropTypeBySport previousValue = this._PropTypeBySport.Entity;
				if (((previousValue != value) 
							|| (this._PropTypeBySport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PropTypeBySport.Entity = null;
						previousValue.Props.Remove(this);
					}
					this._PropTypeBySport.Entity = value;
					if ((value != null))
					{
						value.Props.Add(this);
						this._idPropTypeBySport = value.idPropTypeBySport;
					}
					else
					{
						this._idPropTypeBySport = default(byte);
					}
					this.SendPropertyChanged("PropTypeBySport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="jazzTool.PropByPosition")]
	public partial class PropByPosition
	{
		
		private int _idPropByPosition;
		
		private int _idProp;
		
		private byte _idPosition;
		
		private System.Nullable<int> _order;
		
		private bool _isActive;
		
		private System.Nullable<System.DateTime> _lastModificationDate;
		
		private System.Nullable<byte> _lastModificationUser;
		
		public PropByPosition()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPropByPosition", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int idPropByPosition
		{
			get
			{
				return this._idPropByPosition;
			}
			set
			{
				if ((this._idPropByPosition != value))
				{
					this._idPropByPosition = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idProp", DbType="Int NOT NULL")]
		public int idProp
		{
			get
			{
				return this._idProp;
			}
			set
			{
				if ((this._idProp != value))
				{
					this._idProp = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPosition", DbType="TinyInt NOT NULL")]
		public byte idPosition
		{
			get
			{
				return this._idPosition;
			}
			set
			{
				if ((this._idPosition != value))
				{
					this._idPosition = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[order]", Storage="_order", DbType="Int")]
		public System.Nullable<int> order
		{
			get
			{
				return this._order;
			}
			set
			{
				if ((this._order != value))
				{
					this._order = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isActive", DbType="Bit NOT NULL")]
		public bool isActive
		{
			get
			{
				return this._isActive;
			}
			set
			{
				if ((this._isActive != value))
				{
					this._isActive = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastModificationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> lastModificationDate
		{
			get
			{
				return this._lastModificationDate;
			}
			set
			{
				if ((this._lastModificationDate != value))
				{
					this._lastModificationDate = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastModificationUser", DbType="TinyInt")]
		public System.Nullable<byte> lastModificationUser
		{
			get
			{
				return this._lastModificationUser;
			}
			set
			{
				if ((this._lastModificationUser != value))
				{
					this._lastModificationUser = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="jazzTool.Position")]
	public partial class Position : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private byte _idPosition;
		
		private System.Nullable<byte> _idPropTypeBySport;
		
		private string _Position1;
		
		private System.Nullable<System.DateTime> _lastModificationDate;
		
		private System.Nullable<byte> _lastModificationUser;
		
		private EntityRef<PropTypeBySport> _PropTypeBySport;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidPositionChanging(byte value);
    partial void OnidPositionChanged();
    partial void OnidPropTypeBySportChanging(System.Nullable<byte> value);
    partial void OnidPropTypeBySportChanged();
    partial void OnPosition1Changing(string value);
    partial void OnPosition1Changed();
    partial void OnlastModificationDateChanging(System.Nullable<System.DateTime> value);
    partial void OnlastModificationDateChanged();
    partial void OnlastModificationUserChanging(System.Nullable<byte> value);
    partial void OnlastModificationUserChanged();
    #endregion
		
		public Position()
		{
			this._PropTypeBySport = default(EntityRef<PropTypeBySport>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPosition", AutoSync=AutoSync.OnInsert, DbType="TinyInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public byte idPosition
		{
			get
			{
				return this._idPosition;
			}
			set
			{
				if ((this._idPosition != value))
				{
					this.OnidPositionChanging(value);
					this.SendPropertyChanging();
					this._idPosition = value;
					this.SendPropertyChanged("idPosition");
					this.OnidPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_idPropTypeBySport", DbType="TinyInt")]
		public System.Nullable<byte> idPropTypeBySport
		{
			get
			{
				return this._idPropTypeBySport;
			}
			set
			{
				if ((this._idPropTypeBySport != value))
				{
					if (this._PropTypeBySport.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnidPropTypeBySportChanging(value);
					this.SendPropertyChanging();
					this._idPropTypeBySport = value;
					this.SendPropertyChanged("idPropTypeBySport");
					this.OnidPropTypeBySportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Position", Storage="_Position1", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Position1
		{
			get
			{
				return this._Position1;
			}
			set
			{
				if ((this._Position1 != value))
				{
					this.OnPosition1Changing(value);
					this.SendPropertyChanging();
					this._Position1 = value;
					this.SendPropertyChanged("Position1");
					this.OnPosition1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastModificationDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> lastModificationDate
		{
			get
			{
				return this._lastModificationDate;
			}
			set
			{
				if ((this._lastModificationDate != value))
				{
					this.OnlastModificationDateChanging(value);
					this.SendPropertyChanging();
					this._lastModificationDate = value;
					this.SendPropertyChanged("lastModificationDate");
					this.OnlastModificationDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_lastModificationUser", DbType="TinyInt")]
		public System.Nullable<byte> lastModificationUser
		{
			get
			{
				return this._lastModificationUser;
			}
			set
			{
				if ((this._lastModificationUser != value))
				{
					this.OnlastModificationUserChanging(value);
					this.SendPropertyChanging();
					this._lastModificationUser = value;
					this.SendPropertyChanged("lastModificationUser");
					this.OnlastModificationUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PropTypeBySport_Position", Storage="_PropTypeBySport", ThisKey="idPropTypeBySport", OtherKey="idPropTypeBySport", IsForeignKey=true)]
		public PropTypeBySport PropTypeBySport
		{
			get
			{
				return this._PropTypeBySport.Entity;
			}
			set
			{
				PropTypeBySport previousValue = this._PropTypeBySport.Entity;
				if (((previousValue != value) 
							|| (this._PropTypeBySport.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PropTypeBySport.Entity = null;
						previousValue.Positions.Remove(this);
					}
					this._PropTypeBySport.Entity = value;
					if ((value != null))
					{
						value.Positions.Add(this);
						this._idPropTypeBySport = value.idPropTypeBySport;
					}
					else
					{
						this._idPropTypeBySport = default(Nullable<byte>);
					}
					this.SendPropertyChanged("PropTypeBySport");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
